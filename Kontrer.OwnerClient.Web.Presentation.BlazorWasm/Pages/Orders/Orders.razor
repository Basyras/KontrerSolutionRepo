@using Kontrer.OwnerServer.OrderService.Domain.Orders.AccommodationOrder;
@using Kontrer.OwnerServer.CustomerService.Domain.Customer;
@using Kontrer.OwnerClient.Application.Orders;
@using Kontrer.OwnerClient.Web.Presentation.BlazorWasm.Shared.Labels;
@using Kontrer.OwnerClient.Web.Presentation.BlazorWasm.Shared.Dialogs;
@using Kontrer.OwnerClient.Web.Presentation.BlazorWasm.Shared.Containers;
@using Microsoft.Extensions.Logging;

@page "/offers"
@*@inject Kontrer.Shared.MessageBus.IMessageBusManager bus*@
@inject Microsoft.Extensions.Logging.ILogger<Orders> logger
@inject IOrderManager orderManager
@inject IServiceProvider services
@inject IDialogService DialogService
<ordersContainer>
    <ordersGrid>
        <ordersColumn>
            <LayoutSection Heading="Orders">
                <AdditionalHeading>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="Refresh">Refresh</MudButton>
                    <MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="SeedData">SeedData</MudButton>
                </AdditionalHeading>
                <ChildContent>
                    @if (isLoading)
                    {
                        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                    }

                    @if (loadingFailed)
                    {
                        <StatusLabel Status="Statuses.Error">Failed to load</StatusLabel>
                    }

                    <orderList>
                    @foreach (var newOrder in ToProcessOrders)
                    {
                        <button @onclick="ShowEditor" style="width: 100%; display: block;">
                            <AccommodationItem Order="@newOrder" />
                        </button>
                        <itemSpacer />
                    }</orderList>

                    @if (loadingFailed == false && isLoading == false && ToProcessOrders.Count == 0)
                    {
                        <StatusLabel>all processed</StatusLabel>
                    }
                </ChildContent>
            </LayoutSection>
        </ordersColumn>
        <ordersColumn>
            <LayoutSection Heading="History">
                <ChildContent>
                    @if (isLoading)
                    {
                        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                    }
                    else
                    {
                        if (loadingFailed)
                        {
                            <StatusLabel Status="Statuses.Error">Failed to load</StatusLabel>
                        }
                        else
                        {
                            foreach (var historyOrder in HistoryOrders)
                            {
                                <AccommodationItem Order="@historyOrder" />
                                <itemSpacer />
                            }

                            @if (loadingFailed == false && isLoading == false && HistoryOrders.Count == 0)
                            {
                                <StatusLabel>history empty</StatusLabel>
                            }
                        }
                    }
                </ChildContent>
            </LayoutSection>
        </ordersColumn>
    </ordersGrid>
</ordersContainer>

@code {
    private RenderFragment CreateEditor()
    {
        return@<AccommodationEditor />;
    }
}