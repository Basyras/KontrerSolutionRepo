@using Kontrer.OwnerServer.OrderService.Domain.Orders.AccommodationOrder;
@using Kontrer.OwnerServer.CustomerService.Domain.Customer;
@using Kontrer.OwnerClient.Application.Orders;
@using Kontrer.OwnerClient.Web.Presentation.BlazorWasm.Shared.Labels;
@using Kontrer.OwnerClient.Web.Presentation.BlazorWasm.Shared.Dialogs;
@using Microsoft.Extensions.Logging;

@page "/offers"
@inject Kontrer.Shared.MessageBus.IMessageBusManager bus
@inject Microsoft.Extensions.Logging.ILogger<Orders> logger
@inject IOrderManager orderManager
@inject IServiceProvider services
@inject IDialogService DialogService
<ordersContainer>
    <ordersGrid>
        <ordersColumn>
            <columnHeading>
                To process
                <CollectionCount Collection="@NewOrders" IsLoading="@isLoading" />
            </columnHeading>
            @if (isLoading)
            {
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            }

            @if (loadingFailed)
            {
                <StatusLabel Status="Statuses.Error">Failed to load</StatusLabel>
            }

            @foreach (var newOrder in NewOrders)
            {
                <button @onclick="ShowEditor">
                    <AccommodationItem Order="@newOrder" />
                </button>
                <itemSpacer />
            }

            @if (loadingFailed == false && isLoading == false && NewOrders.Count == 0)
            {
                <StatusLabel>all processed</StatusLabel>
            }
        </ordersColumn>
        <horizontalLine />
        <ordersColumn>
            <columnHeading>
                Waiting for response
                <CollectionCount Collection="@WaitingOrders" IsLoading="@isLoading" />
            </columnHeading>
            @if (isLoading)
            {
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            }
            else
            {
                if (loadingFailed)
                {
                    <StatusLabel Status="Statuses.Error">Failed to load</StatusLabel>
                }
                else
                {
                    foreach (var newOrder in WaitingOrders)
                    {
                        <AccommodationItem Order="@newOrder" />
                        <itemSpacer />
                    }

                    @if (loadingFailed == false && isLoading == false && WaitingOrders.Count == 0)
                    {
                        <StatusLabel>nothing to wait</StatusLabel>
                    }
                }
            }
        </ordersColumn>
        <horizontalLine />
        <ordersColumn>
            <columnHeading>
                History
            </columnHeading>
            @if (isLoading)
            {
                <MudProgressCircular Color="Color.Default" Indeterminate="true" />
            }
            else
            {
                if (loadingFailed)
                {
                    <StatusLabel Status="Statuses.Error">Failed to load</StatusLabel>
                }
                else
                {
                    foreach (var historyOrder in HistoryOrders)
                    {
                        <AccommodationItem Order="@historyOrder" />
                        <itemSpacer />
                    }

                    @if (loadingFailed == false && isLoading == false && HistoryOrders.Count == 0)
                    {
                        <StatusLabel>history empty</StatusLabel>
                    }
                }
            }
        </ordersColumn>
    </ordersGrid>
</ordersContainer>

<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="Refresh">Refresh</MudButton>
<MudButton Variant="Variant.Filled" Color="Color.Primary" @onclick="SeedData">SeedData</MudButton>

@code {
    private RenderFragment CreateEditor()
    {
        return@<AccommodationEditor />;
}
}