@using Basyc.Blazor.Controls.TooltippedText
@using Basyc.Diagnostics.Shared.Logging
@using Basyc.MessageBus.Manager.Application.ResultDiagnostics
@using Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Shared.Helpers
@using Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Shared.Helpers.Colors
@using Microsoft.Extensions.Logging

@{
    string logEntryViewClass = AlternateColor ? "logEntryView--alternate" : "";
    string levelClass = $"level--{LogEntry.LogLevel.ToString()}";
    var servicebackgroundColor = ServiceColorHelper.GetBackground(LogEntry.Service.ServiceName);
    string serviceNameStyle = $"background-color: {servicebackgroundColor};";
}

<logEntryView class="@logEntryViewClass">
    <time>
        @LogEntry.Time.ToString("HH:mm:ss:fff")
    </time>
    <level class="@levelClass">
        @LogLevelToString(LogEntry.LogLevel)
    </level>
    <serviceName style="@serviceNameStyle">
        <BasycTooltippedText Text="@LogEntry.Service.ServiceName" />
    </serviceName>
    @if (Activity is not null)
    {
        <activityName style="@serviceNameStyle">
            <BasycTooltippedText Text="@Activity.DisplayName" />
        </activityName>
    }

    <message>
        @LogEntry.Message
    </message>
</logEntryView>


@code {
    [Parameter] public LogEntry LogEntry { get; set; }
    [Parameter] public ActivityContext Activity { get; set; }
    [Parameter] public bool AlternateColor { get; set; }

    private static string LogLevelToString(LogLevel logLevel)
    {
        return logLevel switch
        {
            LogLevel.Warning => "warn",
            LogLevel.Information => "info",
            LogLevel.Debug => "dbug",
            LogLevel.Error => "erro",
            LogLevel.Critical => "crit",
            _ => logLevel.ToString(),
        };
    }

}
