@using Basyc.MessageBus.Manager.Application.ResultDiagnostics
@using Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Components.DurationMap

@implements IDisposable
@{
    var width = Activity.HasEnded ? DurationViewHelper.GetDurationAsRem(Activity.EndTime - Activity.StartTime, Scale) : "5rem";
    string durationBoxStyle = $"min-width: {width}; background-color: {Color};";
    string mudTooltipBoxStyle = $"width: 100%;";
}

<horizontalDurationBoxView>
    <MudTooltip RootStyle="@mudTooltipBoxStyle" Arrow="true">
        <ChildContent>
            <durationBox style="@durationBoxStyle">
                <durationBoxBorder>
                    <acitvityName>
                        @Activity.DisplayName
                    </acitvityName>
                    @if (Activity.HasEnded is false)
                    {
                        <spinner>
                            <MudProgressCircular Color="MudBlazor.Color.Default" Indeterminate="true" Size="Size.Small" />
                        </spinner>
                    }
                </durationBoxBorder>
            </durationBox>
        </ChildContent>
        <TooltipContent>
            <toolTipContent>
                service: @Activity.Service.ServiceName
                <br />
                name: @Activity.DisplayName
                <br />
                id: @Activity.Id
                <br />
                start: @Activity.StartTime.Millisecond
                <br />
                end: @Activity.EndTime.Millisecond
                <br />
                dur: @((Activity.EndTime - Activity.StartTime).TotalMilliseconds) ms
                <br />
                hasParent: @Activity.HasParent
                <br />
                ParentId?: @Activity.ParentActivity?.Id
                <br />
                hasEnded: @Activity.HasEnded

            </toolTipContent>
        </TooltipContent>
    </MudTooltip>
    <nestedDurationBoxes>
        @{
            ActivityContext previousActivity = null;
            foreach (var nestedActivity in Activity.NestedActivities.ToArray())
            {
                var isFirstNested = previousActivity is null && Activity.ParentActivity is not null;
                if (isFirstNested)
                {
                    var lateStartDuration = nestedActivity.StartTime - Activity.StartTime;
                    if (lateStartDuration > TimeSpan.FromMilliseconds(0))
                    {
                        <HorizontalUnknownDurationBoxView StartTime="Activity.StartTime" EndTime="nestedActivity.StartTime" Scale="Scale" />
                    }
                }

                var isGapBetweenPreviousNested = previousActivity is not null && previousActivity.EndTime != nestedActivity.StartTime;
                if (isGapBetweenPreviousNested)
                {
                    <HorizontalUnknownDurationBoxView StartTime="previousActivity.EndTime" EndTime="nestedActivity.StartTime" Scale="Scale" Color="@Color" />
                }

                <HorizontalDurationBoxView Activity="nestedActivity" Scale="Scale" Color="@Color" />
                previousActivity = nestedActivity;
            }


            if (Activity.HasEnded && Activity.NestedActivities.Any() && Activity.NestedActivities.All(x => x.HasEnded))
            {
                var lastActivity = Activity.NestedActivities.OrderByDescending(x => x.EndTime).First();
                if (Activity.EndTime != lastActivity.EndTime)
                {
                    <HorizontalUnknownDurationBoxView StartTime="lastActivity.EndTime" EndTime="Activity.EndTime" Scale="Scale" Color="@Color" />
                }
            }
        }
    </nestedDurationBoxes>


</horizontalDurationBoxView>


@code {
    [Parameter, EditorRequired] public ActivityContext Activity { get; set; }
    [Parameter, EditorRequired] public double Scale { get; set; }
    /// <summary>
    ///Hexadecimal string
    /// </summary>
    [Parameter, EditorRequired] public string Color { get; set; }

    protected override Task OnParametersSetAsync()
    {
        Activity.ActivityEnded += OnActivityEnded;
        Activity.NestedActivityEnded += OnNestedActivityEnded;
        return base.OnParametersSetAsync();
    }

    private void OnActivityEnded(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private void OnNestedActivityEnded(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        Activity.ActivityEnded -= OnActivityEnded;
        Activity.NestedActivityEnded -= OnNestedActivityEnded;
    }


}
