@using Basyc.Blazor.Controls.TooltippedText
@using Basyc.MessageBus.Manager.Application.ResultDiagnostics
@using Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Components.DurationMap
@using Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Shared.Helpers

@implements IDisposable
@{
    string width = "5rem";
    if (Activity.HasEnded)
    {
        width = DurationViewHelper.GetCssDurationValue(Activity.EndTime - Activity.StartTime, Scale, out var remNumber);
        if (remNumber < 0.2)
        {
            width = "0.5px";
        }
    }
    string durationBoxStyle = $"min-width: {width}; background-color: {Color};";
    string durationBoxBorder = $"background-color: #000000{ColorHelper.GetHexPercentage(NestingLevel * 5)};";
    string mudTooltipBoxStyle = $"";
}

<horizontalDurationBoxView>
    <MudTooltip RootStyle="@mudTooltipBoxStyle" Arrow="true">
        <ChildContent>
            <durationBox style="@durationBoxStyle">
                <durationBoxBorder style="@durationBoxBorder">
                    <acitvityName>
                        @Activity.DisplayName
                    </acitvityName>
                    @if (Activity.HasEnded is false)
                    {
                        <spinner>
                            <MudProgressCircular Color="MudBlazor.Color.Default" Indeterminate="true" Size="Size.Small" />
                        </spinner>
                    }
                    <logs>
                        @foreach (var log in Activity.Logs)
                        {
                            var logStartPosition = DurationViewHelper.GetCssDurationValue(log.Time - Activity.StartTime, Scale);

                            var logStyle = $"margin-left: {logStartPosition}";
                            <log style="@logStyle">
                                <MudTooltip RootStyle="display: block; height: 100%;">
                                    <ChildContent>
                                        <logContent />
                                    </ChildContent>
                                    <TooltipContent>
                                        <toolTipContent>
                                            time: @log.Time.ToString("hh:mm:ss:fff")
                                            <br />
                                            diff: @((log.Time - Activity.StartTime).TotalMilliseconds)
                                            <br />
                                            logLevel: @log.LogLevel.ToString()
                                            <br />
                                            message: @log.Message
                                            <br />
                                            spanId: @log.SpanId
                                            <br />

                                        </toolTipContent>
                                    </TooltipContent>
                                </MudTooltip>
                            </log>
                        }
                    </logs>

                </durationBoxBorder>
            </durationBox>
        </ChildContent>
        <TooltipContent>
            <toolTipContent>
                service: @Activity.Service.ServiceName
                <br />
                name: @Activity.DisplayName
                <br />
                id: @Activity.Id
                <br />
                start: @Activity.StartTime.ToString("hh:mm:ss:fff")
                <br />
                end: @Activity.EndTime.ToString("hh:mm:ss:fff")
                <br />
                dur: @((Activity.EndTime - Activity.StartTime).TotalMilliseconds) ms
                <br />
                hasParent: @Activity.HasParent
                <br />
                ParentId?: @Activity.ParentActivity?.Id
                <br />
                hasEnded: @Activity.HasEnded
                <br />
                logs: @Activity.Logs.Count

            </toolTipContent>
        </TooltipContent>
    </MudTooltip>

    <nestedDurationBoxes>
        @{
            List<RowViewModel> rows = new();
            rows.Add(new RowViewModel());
            foreach (var nestedActivity in Activity.NestedActivities)
            {
                var nestedActivityLatestEndTime = GetRecursiveLatestEndTime(nestedActivity); ;
                var lastRow = rows.Last();
                if (lastRow.LastEndTime == default)
                {
                    lastRow.Activities.Add(nestedActivity);
                    lastRow.LastEndTime = nestedActivityLatestEndTime;
                    lastRow.StartTime = nestedActivity.StartTime;
                    continue;
                }
                var previousActivityInRow = lastRow.Activities.First();
                var diff = Math.Ceiling((nestedActivity.StartTime - lastRow.LastEndTime).TotalMilliseconds);
                var canFitOnSameRow = diff >= 0;
                var startsTheSameAndPreviousHas0Duration = ((lastRow.LastEndTime - nestedActivity.StartTime).TotalMilliseconds == 0 && previousActivityInRow.Duration.Ticks == 0);
                if (canFitOnSameRow || startsTheSameAndPreviousHas0Duration)
                {
                    lastRow.Activities.Add(nestedActivity);
                    lastRow.LastEndTime = nestedActivityLatestEndTime;
                }
                else
                {
                    var newRow = new RowViewModel();
                    newRow.LastEndTime = nestedActivityLatestEndTime;
                    newRow.Activities.Add(nestedActivity);
                    newRow.StartTime = nestedActivity.StartTime;
                    rows.Add(newRow);
                }
            }

            RowViewModel previousRow = null;
            foreach (var row in rows)
            {
                ActivityContext previousRowActivity = null;
                if (previousRow != null)
                {
                    <rowSplitter/>
                }
                <nestedRows>
                    @if (rows.Count > 1)
                    {
                        <treeLeg>
                            <treeHorizontalLine />
                        </treeLeg>
                    }
                    @foreach (var nestedActivity in row.Activities)
                    {
                        <nestedRow>
                            @{
                                var isFirstNested = previousRowActivity is null;
                                if (isFirstNested)
                                {
                                    var lateStartDuration = nestedActivity.StartTime - Activity.StartTime;
                                    if (lateStartDuration > TimeSpan.FromMilliseconds(0))
                                    {
                                        <HorizontalUnknownDurationBoxView StartTime="Activity.StartTime" EndTime="nestedActivity.StartTime" Scale="Scale" Color="@Color" />
                                    }
                                }


                                var isGapBetweenPreviousNested = previousRowActivity is not null && previousRowActivity.EndTime != nestedActivity.StartTime;
                                if (isGapBetweenPreviousNested)
                                {
                                    <HorizontalUnknownDurationBoxView StartTime="previousRowActivity.EndTime" EndTime="nestedActivity.StartTime" Scale="Scale" Color="@Color" />
                                }
                                <HorizontalDurationBoxView Activity="nestedActivity" Scale="Scale" Color="@Color" NestingLevel="NestingLevel+1" />

                                previousRowActivity = nestedActivity;

                            }
                        </nestedRow>
                    }
                </nestedRows>
                previousRow = row;
            }

        }
    </nestedDurationBoxes>


</horizontalDurationBoxView>


@code {
    private class RowViewModel
    {
        public RowViewModel()
        {

        }
        public DateTimeOffset StartTime { get; set; } = default;
        public DateTimeOffset LastEndTime { get; set; } = default;
        public List<ActivityContext> Activities { get; } = new();
    }

    [Parameter, EditorRequired] public ActivityContext Activity { get; set; }
    [Parameter, EditorRequired] public double Scale { get; set; }
    /// <summary>
    ///Hexadecimal string
    /// </summary>
    [Parameter, EditorRequired] public string Color { get; set; }
    [Parameter, EditorRequired] public int NestingLevel { get; set; }

    protected override Task OnParametersSetAsync()
    {
        Activity.ActivityEnded += OnActivityEnded;
        Activity.NestedActivityEnded += OnNestedActivityEnded;
        return base.OnParametersSetAsync();
    }

    private void OnActivityEnded(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private void OnNestedActivityEnded(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        Activity.ActivityEnded -= OnActivityEnded;
        Activity.NestedActivityEnded -= OnNestedActivityEnded;
    }

    private static DateTimeOffset GetRecursiveLatestEndTime(ActivityContext activity)
    {
        var latestEndTime = activity.EndTime;
        foreach (var nestedActivity in activity.NestedActivities)
        {
            var nestedLatestEndTime = GetRecursiveLatestEndTime(nestedActivity);
            latestEndTime = latestEndTime > nestedLatestEndTime ? latestEndTime : nestedLatestEndTime;
        }
        return latestEndTime;
    }
}
