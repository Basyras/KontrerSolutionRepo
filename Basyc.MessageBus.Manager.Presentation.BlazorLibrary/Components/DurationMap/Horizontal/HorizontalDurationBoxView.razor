@using Basyc.MessageBus.Manager.Application.ResultDiagnostics
@using Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Components.DurationMap

@implements IDisposable
@{
    string width = "5rem";
    if (Activity.HasEnded)
    {
        width = DurationViewHelper.GetDurationAsRem(Activity.EndTime - Activity.StartTime, Scale, out var remNumber);
        if (remNumber < 0.2)
        {
            width = "5px";
        }
    }
    string durationBoxStyle = $"min-width: {width}; background-color: {Color};";
    string mudTooltipBoxStyle = $"";
}

<horizontalDurationBoxView>
    <MudTooltip RootStyle="@mudTooltipBoxStyle" Arrow="true">
        <ChildContent>
            <durationBox style="@durationBoxStyle">
                <durationBoxBorder>
                    <acitvityName>
                        @Activity.DisplayName
                    </acitvityName>
                    @if (Activity.HasEnded is false)
                    {
                        <spinner>
                            <MudProgressCircular Color="MudBlazor.Color.Default" Indeterminate="true" Size="Size.Small" />
                        </spinner>
                    }
                </durationBoxBorder>
            </durationBox>
        </ChildContent>
        <TooltipContent>
            <toolTipContent>
                service: @Activity.Service.ServiceName
                <br />
                name: @Activity.DisplayName
                <br />
                id: @Activity.Id
                <br />
                start: @Activity.StartTime.Millisecond
                <br />
                end: @Activity.EndTime.Millisecond
                <br />
                dur: @((Activity.EndTime - Activity.StartTime).TotalMilliseconds) ms
                <br />
                hasParent: @Activity.HasParent
                <br />
                ParentId?: @Activity.ParentActivity?.Id
                <br />
                hasEnded: @Activity.HasEnded

            </toolTipContent>
        </TooltipContent>
    </MudTooltip>

    <nestedDurationBoxes>
        @{
            ActivityContext previousActivity = null;
            List<RowViewModel> rows = new();
            rows.Add(new RowViewModel());
            foreach (var nestedActivity in Activity.NestedActivities)
            {
                var nestedActivityLatestEndTime = GetRecursiveLatestEndTime(nestedActivity); ;
                var lastRow = rows.Last();
                if (lastRow.LastEndTime == default)
                {
                    lastRow.Activities.Add(nestedActivity);
                    lastRow.LastEndTime = nestedActivityLatestEndTime;
                    lastRow.StartTime = nestedActivity.StartTime;
                    continue;
                }

                if (lastRow.LastEndTime < nestedActivity.StartTime)
                {
                    lastRow.Activities.Add(nestedActivity);
                    lastRow.LastEndTime = nestedActivityLatestEndTime;
                }
                else
                {
                    var newRow = new RowViewModel();
                    newRow.LastEndTime = nestedActivityLatestEndTime;
                    newRow.Activities.Add(nestedActivity);
                    newRow.StartTime = nestedActivity.StartTime;
                    rows.Add(newRow);
                }
            }
            foreach (var row in rows)
            {

                <row>
                    @if (Activity.NestedActivities.Count > 1)
                    {
                        <treeLeg>
                            <treeHorizontalLine />
                        </treeLeg>
                    }
                    @foreach (var nestedActivity in row.Activities)
                    {
                        <nestedRow>
                            @{
                                var isFirstNested = previousActivity is null && Activity.ParentActivity is not null;
                                if (isFirstNested)
                                {
                                    var lateStartDuration = nestedActivity.StartTime - Activity.StartTime;
                                    if (lateStartDuration > TimeSpan.FromMilliseconds(0))
                                    {
                                        <HorizontalUnknownDurationBoxView StartTime="row.StartTime" EndTime="nestedActivity.StartTime" Scale="Scale" Color="@Color" />
                                    }
                                }


                                var isGapBetweenPreviousNested = previousActivity is not null && previousActivity.EndTime != nestedActivity.StartTime;
                                if (isGapBetweenPreviousNested)
                                {
                                    <HorizontalUnknownDurationBoxView StartTime="previousActivity.EndTime" EndTime="nestedActivity.StartTime" Scale="Scale" Color="@Color" />
                                }
                                <HorizontalDurationBoxView Activity="nestedActivity" Scale="Scale" Color="@Color" />

                                previousActivity = nestedActivity;

                            }
                        </nestedRow>
                    }
                </row>

            }

        }
    </nestedDurationBoxes>


</horizontalDurationBoxView>


@code {
    private class RowViewModel
    {
        public RowViewModel()
        {

        }
        public DateTimeOffset StartTime { get; set; } = default;
        public DateTimeOffset LastEndTime { get; set; } = default;
        public List<ActivityContext> Activities { get; } = new();
    }

    [Parameter, EditorRequired] public ActivityContext Activity { get; set; }
    [Parameter, EditorRequired] public double Scale { get; set; }
    /// <summary>
    ///Hexadecimal string
    /// </summary>
    [Parameter, EditorRequired] public string Color { get; set; }

    protected override Task OnParametersSetAsync()
    {
        Activity.ActivityEnded += OnActivityEnded;
        Activity.NestedActivityEnded += OnNestedActivityEnded;
        return base.OnParametersSetAsync();
    }

    private void OnActivityEnded(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    private void OnNestedActivityEnded(object sender, EventArgs e)
    {
        StateHasChanged();
    }

    public void Dispose()
    {
        Activity.ActivityEnded -= OnActivityEnded;
        Activity.NestedActivityEnded -= OnNestedActivityEnded;
    }

    private static DateTimeOffset GetRecursiveLatestEndTime(ActivityContext activity)
    {
        var latestEndTime = activity.EndTime;
        foreach (var nestedActivity in activity.NestedActivities)
        {
            var nestedLatestEndTime = GetRecursiveLatestEndTime(nestedActivity);
            latestEndTime = latestEndTime > nestedLatestEndTime ? latestEndTime : nestedLatestEndTime;
        }
        return latestEndTime;
    }
}
