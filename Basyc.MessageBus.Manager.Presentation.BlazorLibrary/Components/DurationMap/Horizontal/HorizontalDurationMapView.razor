@using Basyc.Diagnostics.Shared.Durations
@using Basyc.Diagnostics.Shared.Logging
@using Basyc.MessageBus.Manager.Application
@using Basyc.MessageBus.Manager.Application.ResultDiagnostics

<horizontalDurationMapView>
    @{
        if (RequestContext.Diagnostics.Services.Any())
        {
            foreach (var service in RequestContext.Diagnostics.Services.Where(x => x.Activities.Any()).OrderBy(x => x.Activities.Min(y => y.StartTime)))
            {
                string serviceStyle = "";
                var serviceFirstActivity = service.Activities.First();
                serviceStyle = $"margin-left: {DurationViewHelper.GetDurationAsRem(RequestContext.StartTime, serviceFirstActivity.StartTime, Scale)};";
                    <service style="@serviceStyle">
                        <serviceName>
                            @service.ServiceIdentity.ServiceName
                        </serviceName>
                        <durationBoxes>
                            @{
                            ActivityContext previousActivity = null;
                            foreach (var activity in service.Activities)
                            {
                                //var relativeStart = previousActivity == null ? RequestContext.StartTime  : activity.StartTime.AddTicks(-serviceFirstActivity.StartTime.UtcTicks);
                                //string leftMargin = DurationViewHelper.GetDurationAsRem(relativeStart, activity.StartTime, Scale);
                                string leftMargin = previousActivity == null ? "0px" : DurationViewHelper.GetDurationAsRem(serviceFirstActivity.StartTime, activity.StartTime, Scale);
                                        <div style="display: flex; margin-left:@leftMargin;">
                                            @{
                                        var isGapBetweenPreviousNested = previousActivity is not null && previousActivity.EndTime != activity.StartTime;
                                        if (isGapBetweenPreviousNested)
                                        {
                                                        <HorizontalUnknownDurationBoxView StartTime="previousActivity.EndTime" EndTime="activity.StartTime" Scale="Scale" />
                                        }
                                                    <HorizontalDurationBoxView Activity="activity" Scale="Scale" />
                                        previousActivity = activity;
                                            }
                                        </div>
                            }
                            }
                        </durationBoxes>
                    </service>
            }
        }
    }
    <zoomToolBar>
        @*        <MudStack Row="true">
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Add" OnClick="OnZoomInClick" />
        <MudText>
        @((Scale * 100).ToString("0"))%
        </MudText>
        <MudField >

        </MudField>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Remove" OnClick="OnZoomOutClick" />
        </MudStack>*@
        <MudNumericField Format="N2" T="double" @bind-Value="Scale" FullWidth="false" Step="0.1" />
    </zoomToolBar>

</horizontalDurationMapView>



@code {
    [Parameter] public RequestContext RequestContext { get; set; }
    [Parameter] public double Scale { get; set; } = 1;

    protected override void OnParametersSet()
    {
        RequestContext.Diagnostics.ActivityStartReceived -= OnActivityStartReceived;
        RequestContext.Diagnostics.ActivityStartReceived += OnActivityStartReceived;
        RequestContext.Diagnostics.ActivityEndReceived -= OnActivityEneReceived;
        RequestContext.Diagnostics.ActivityEndReceived += OnActivityEneReceived;
        base.OnParametersSet();
    }

    private void OnActivityStartReceived(object sender, ActivityStart activityStart)
    {
        StateHasChanged();
    }

    private void OnActivityEneReceived(object sender, ActivityEnd activityEnd)
    {
        StateHasChanged();
    }

    private void OnZoomInClick(MouseEventArgs args)
    {
        Scale += 0.1;
    }

    private void OnZoomOutClick(MouseEventArgs args)
    {
        Scale -= 0.1;
        if (Scale < 0)
            Scale = 0;
    }
}
