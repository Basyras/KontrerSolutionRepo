@using Basyc.Blazor.Controls.TooltippedText
@using Basyc.Diagnostics.Shared.Durations
@using Basyc.Diagnostics.Shared.Logging
@using Basyc.MessageBus.Manager.Application
@using Basyc.MessageBus.Manager.Application.ResultDiagnostics
@using Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Shared.Helpers

<horizontalDurationMapView>
    <services>
        @{
            if (RequestContext.Diagnostics.Services.Any())
            {
                foreach (var service in RequestContext.Diagnostics.Services.Where(x => x.Activities.Any()).OrderBy(x => x.Activities.Min(y => y.StartTime)))
                {
                    var color = ColorHelper.GetColorFromText(service.ServiceIdentity.ServiceName, 0.7, 0, 0.4);
                    var borderColor = ColorHelper.GetColorFromText(service.ServiceIdentity.ServiceName, 0.7, 0, 0.25);
                    var backgroundColor = ColorHelper.GetColorFromText(service.ServiceIdentity.ServiceName, 0.7, 0, 0.05);

                    var serviceFirstActivity = service.Activities.First();
                    string serviceStyle = $"margin-left: {DurationViewHelper.GetCssDurationValue(RequestContext.StartTime, serviceFirstActivity.StartTime, Scale)}; background-color: {backgroundColor}; box-shadow: 0px 0px 0px 1px {borderColor};";
                    string serviceNameStyle = $"color: {color}";
                    <service style="@serviceStyle">
                        <serviceNameContainer>
                            <serviceName style="@serviceNameStyle">
                                @service.ServiceIdentity.ServiceName
                            </serviceName>
                        </serviceNameContainer>
                        <durationBoxes>
                            @{
                                ActivityContext previousActivity = null;
                                foreach (var activity in service.Activities)
                                {
                                    <unknownAndKnowGroup>
                                        @{
                                            string leftMargin = previousActivity == null ? "0px" : DurationViewHelper.GetCssDurationValue(serviceFirstActivity.StartTime, activity.StartTime, Scale);
                                            <div style="display: flex; margin-left:@leftMargin;">
                                                @{
                                                    <HorizontalDurationBoxView Activity="activity" Scale="Scale" Color="@borderColor" NestingLevel="0" />
                                                    previousActivity = activity;
                                                }
                                            </div>
                                        }
                                    </unknownAndKnowGroup>
                                }
                            }
                        </durationBoxes>
                    </service>
                    <br>
                }
            }
        }
    </services>

    <zoomToolBar>
        <MudNumericField Format="N2" T="double" @bind-Value="Scale" FullWidth="false" Step="0.1" Style="color: white;" />
    </zoomToolBar>

</horizontalDurationMapView>



@code {
    [Parameter] public RequestContext RequestContext { get; set; }
    [Parameter] public double Scale { get; set; } = 1;

    protected override void OnParametersSet()
    {
        RequestContext.Diagnostics.ActivityStartReceived -= OnActivityStartReceived;
        RequestContext.Diagnostics.ActivityStartReceived += OnActivityStartReceived;
        RequestContext.Diagnostics.ActivityEndReceived -= OnActivityEneReceived;
        RequestContext.Diagnostics.ActivityEndReceived += OnActivityEneReceived;
        base.OnParametersSet();
    }

    private void OnActivityStartReceived(object sender, ActivityStart activityStart)
    {
        StateHasChanged();
    }

    private void OnActivityEneReceived(object sender, ActivityEnd activityEnd)
    {
        StateHasChanged();
    }

    private void OnZoomInClick(MouseEventArgs args)
    {
        Scale += 0.1;
    }

    private void OnZoomOutClick(MouseEventArgs args)
    {
        Scale -= 0.1;
        if (Scale < 0)
            Scale = 0;
    }
}
