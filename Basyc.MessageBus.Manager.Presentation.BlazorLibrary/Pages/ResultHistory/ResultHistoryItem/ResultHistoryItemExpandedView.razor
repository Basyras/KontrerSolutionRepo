@using Basyc.MessageBus.Manager.Application.ResultDiagnostics
@using Basyc.MessageBus.Manager.Application
@using Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Components
@using Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Components.DurationMap
@using Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Components.DurationMap.Horizontal
@using Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Components.LogWindow
@using Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Shared.Helpers

<resultHistoryItemExpandedView>
    <basicSection>
        <basicTable>
            <MudGrid Spacing="0">
                <MudItem lg="6">
                    <MudStack Spacing="2">
                        <formLabel>
                            StartTime
                        </formLabel>
                        <formLabel>
                            State
                        </formLabel>
                        <formLabel>
                            Duration
                        </formLabel>
                        <formLabel>
                            TraceId
                        </formLabel>
                    </MudStack>
                </MudItem>
                <MudItem lg="6">
                    <MudStack Spacing="2">
                        <formValue>
                            @TimeConverter.TimeToText(RequestContext.CreationTime)
                        </formValue>
                        <formValue>
                            @RequestContext.State.ToString()
                        </formValue>
                        <formValue>
                            <LatencyView RequestContext="RequestContext" />
                        </formValue>
                        <formValue>
                            @RequestContext.TraceId
                        </formValue>
                    </MudStack>
                </MudItem>
            </MudGrid>
        </basicTable>

        <dataSubSection>
            <requestBox>
                <textValue>
                    @ResponseResultConverter.CreateInputOverview(RequestContext.Request.Parameters)
                </textValue>
            </requestBox>
            <arrow>
                <MudIcon Icon="@Icons.Material.Rounded.Forward" />
            </arrow>

            <responseBox>
                @if (RequestContext.State == RequestResultState.Started)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="100%" Width="100%" />
                }
                else
                {
                    <textValue>
                        @if (RequestContext.State == RequestResultState.Completed)
                        {
                            if (RequestContext.Request.RequestInfo.HasResponse)
                            {
                                @RequestContext.Response
                            }
                            else
                            {
                                <ghostLabel>
                                    Result does not have an output
                                </ghostLabel>
                            }
                        }
                        @if (RequestContext.State == RequestResultState.Failed)
                        {
                            @RequestContext.ErrorMessage
                        }
                    </textValue>
                }
            </responseBox>
        </dataSubSection>

    </basicSection>
    <activityMapSecion>
        <sectionLabel>
            ActivityMap
        </sectionLabel>
        <HorizontalDurationMapView Activities="RequestContext.Diagnostics.Activities.ToList()" />
    </activityMapSecion>
    <logsSection>
        <sectionLabel class="sectionLabel--logs">
            Logs
        </sectionLabel>
        <LogWindowView DiagnosticsContext="RequestContext.Diagnostics" />
    </logsSection>
</resultHistoryItemExpandedView>


@code {

    [Parameter]
    [EditorRequired]
    public RequestContext RequestContext { get; init; }

    protected override void OnInitialized()
    {
        RequestContext.Diagnostics.ActivityStartReceived += (s, e) =>
        {
            StateHasChanged();
        };

        RequestContext.Diagnostics.ActivityEndReceived += (s, e) =>
        {
            StateHasChanged();
        };
        base.OnInitialized();
    }
}
