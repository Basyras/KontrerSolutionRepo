@using Basyc.MessageBus.Manager.Application
@using System.Text
@using Basyc.MessageBus.Manager.Application.ResultDiagnostics
@using Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Components

@{
    string historyItemClass = $"historyItem--state--{RequestResult.State.ToString()}";
    string historyItemIsSelected = $"historyItem--isSelected--{IsSelected.ToString()}";
}

<historyItem class="@historyItemClass @historyItemIsSelected">
    @if (RequestResult is not null && DiagnosticsContext is not null)
    {
        if (IsSelected)
        {
            <ResultHistoryItemExpandedView RequestResult="RequestResult" DiagnosticsContext="DiagnosticsContext" />
        }
        else
        {
            <collapsedGrid>
                <id>
                    #@OrderIndex
                </id>
                <inputBorder>
                    @CreateInputOverview(RequestResult.Request.Parameters)
                </inputBorder>
                <outputBorder>
                    @if (RequestResult.State == RequestResultState.Started)
                    {
                        <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" />
                    }
                    else
                    {
                        <responseValue>
                            @if (RequestResult.State == RequestResultState.Completed)
                            {
                                if (RequestResult.Request.RequestInfo.HasResponse)
                                {
                                    @RequestResult.Response
                                }
                                else
                                {
                                    <ghostLabel>
                                        Result does not have an output
                                    </ghostLabel>
                                }
                            }
                            @if (RequestResult.State == RequestResultState.Failed)
                            {
                                @RequestResult.ErrorMessage
                            }
                        </responseValue>
                    }
                </outputBorder>
                <status>
                    <LatencyView RequestResult="RequestResult" />
                </status>
            </collapsedGrid>
        }

    }
    else
    {
        @:null
    }

    <button @onclick="ItemClick" class="buttonExpand">
        <MudIcon Icon="@(IsSelected ? Icons.Material.Filled.ExpandLess : Icons.Material.Filled.ExpandMore)" Title="Expand/Collapse" />
    </button>
</historyItem>



@code {
    private RequestResult requestResult;

    [Parameter]
    public RequestResult RequestResult
    {
        get => requestResult;
        set
        {
            if (requestResult is not null)
            {
                requestResult.StateChanged -= ResultStateChanged;
            }
            requestResult = value;
            requestResult.StateChanged += ResultStateChanged;
        }
    }

    [Parameter]
    public RequestDiagnosticsContext DiagnosticsContext { get; set; }

    private bool isSelected;

    [Parameter]
    public bool IsSelected
    {
        get => isSelected;
        set
        {
            if (isSelected == value) return;
            isSelected = value;
            IsSelectedChanged.InvokeAsync(value);

        }
    }

    [Parameter]
    public EventCallback<bool> IsSelectedChanged { get; set; }

    [Parameter]
    public int OrderIndex { get; set; }



    private void ResultStateChanged(object sender, EventArgs eventArgs)
    {
        this.StateHasChanged();
    }

    //private static string CreateInputOverviewJson(IEnumerable<Parameter> parameters)
    //{
    //    StringBuilder stringBuilder = new StringBuilder();
    //    stringBuilder.Append("{");
    //    foreach (var parameter in parameters)
    //    {
    //        stringBuilder.Append("\"");
    //        stringBuilder.Append(parameter.ParameterInfo.ParameterDisplayName);
    //        stringBuilder.Append("\"");
    //        stringBuilder.Append(":");
    //        stringBuilder.Append("\"");
    //        var paramterValueString = parameter.Value is null ? "null" : parameter.Value.ToString();
    //        stringBuilder.Append(paramterValueString);
    //        stringBuilder.Append("\"");
    //        stringBuilder.Append(",");

    //    }
    //    stringBuilder.Remove(stringBuilder.Length - 1, 1);
    //    stringBuilder.Append("}");
    //    return stringBuilder.ToString();
    //}

    private static string CreateInputOverview(IEnumerable<Parameter> parameters)
    {
        StringBuilder stringBuilder = new StringBuilder();
        foreach (var parameter in parameters)
        {
            var paramterValueString = parameter.Value is null ? "null" : parameter.Value.ToString();
            stringBuilder.Append(paramterValueString);
            stringBuilder.Append(", ");
        }
        if (parameters.Count() > 0)
        {
            stringBuilder.Remove(stringBuilder.Length - 2, 2);
        }
        return stringBuilder.ToString();
    }

    private void ItemClick()
    {
        IsSelected = !IsSelected;
        //StateHasChanged();
    }


}
