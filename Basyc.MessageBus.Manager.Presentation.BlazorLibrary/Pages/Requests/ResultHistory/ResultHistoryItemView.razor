@using Basyc.MessageBus.Manager.Application
@using System.Text

@{
    string historyItemClass = $"historyItem--state--{RequestResult.State.ToString()}";
}

<historyItem class="@historyItemClass">
    @if (RequestResult is not null)
    {
        string latencyClass = $"latency--state--{RequestResult.State.ToString()}";
        <id>
            #@RequestResult.Id
        </id>
        <inputBorder>
            @CreateInputOverview(RequestResult.Request.Parameters)
        </inputBorder>
        <outputBorder>
            @if (RequestResult.State == RequestResultState.Started)
            {
                <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" Height="100%" />
            }
            else
            {
                <responseValue>
                    @if (RequestResult.State == RequestResultState.Completed)
                    {
                        if (RequestResult.Request.RequestInfo.HasResponse)
                        {
                            @RequestResult.Response
                        }
                        else
                        {
                            <ghostLabel>
                                Result does not have an output
                            </ghostLabel>
                        }
                    }
                    @if (RequestResult.State == RequestResultState.Failed)
                    {
                        @RequestResult.ErrorMessage
                    }
                </responseValue>
            }
        </outputBorder>
        <latency class="@latencyClass">
            @if (RequestResult.State == RequestResultState.Started)
            {
                <spinner>
                    <MudProgressCircular Color="Color.Default" Indeterminate="true" Size="Size.Small" />
                </spinner>
            }
            else
            {
                @if (RequestResult.Duration.HasValue)
                {
                    @Math.Ceiling(RequestResult.Duration.Value.TotalMilliseconds)
                }
                else
                {
                    @:--
                }
                @:ms
            }
        </latency>
    }
    else
    {
        @:null
    }
</historyItem>


@code {
    private RequestResult requestResult;

    [Parameter]
    public RequestResult RequestResult
    {
        get => requestResult;
        set
        {
            if (requestResult is not null)
            {
                requestResult.StateChanged -= ResultStateChanged;
            }
            requestResult = value;
            requestResult.StateChanged += ResultStateChanged;
        }
    }

    private void ResultStateChanged(object sender, EventArgs eventArgs)
    {
        this.StateHasChanged();
    }

    //private static string CreateInputOverviewJson(IEnumerable<Parameter> parameters)
    //{
    //    StringBuilder stringBuilder = new StringBuilder();
    //    stringBuilder.Append("{");
    //    foreach (var parameter in parameters)
    //    {
    //        stringBuilder.Append("\"");
    //        stringBuilder.Append(parameter.ParameterInfo.ParameterDisplayName);
    //        stringBuilder.Append("\"");
    //        stringBuilder.Append(":");
    //        stringBuilder.Append("\"");
    //        var paramterValueString = parameter.Value is null ? "null" : parameter.Value.ToString();
    //        stringBuilder.Append(paramterValueString);
    //        stringBuilder.Append("\"");
    //        stringBuilder.Append(",");

    //    }
    //    stringBuilder.Remove(stringBuilder.Length - 1, 1);
    //    stringBuilder.Append("}");
    //    return stringBuilder.ToString();
    //}

    private static string CreateInputOverview(IEnumerable<Parameter> parameters)
    {
        StringBuilder stringBuilder = new StringBuilder();
        foreach (var parameter in parameters)
        {
            var paramterValueString = parameter.Value is null ? "null" : parameter.Value.ToString();
            stringBuilder.Append(paramterValueString);
            stringBuilder.Append(", ");
        }
        if (parameters.Count() > 0)
        {
            stringBuilder.Remove(stringBuilder.Length - 2, 2);
        }
        return stringBuilder.ToString();
    }
}
