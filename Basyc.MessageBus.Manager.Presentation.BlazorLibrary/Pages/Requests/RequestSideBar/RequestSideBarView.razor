<reqeustSideBarView>
@*    <heading>
        <headingText>
            <RequestTag RequestType="@RequestTagTypeHelper.FromRequestType(SelectedRequestViewModel.RequestInfo.RequestType)" />
            @SelectedRequestViewModel.RequestInfo.RequestDisplayName
        </headingText>
        <headingDivider />
    </heading>*@
    <table class="paramTable paddingContainer">
        @for (int i = 0; i < SelectedRequestViewModel.RequestInfo.Parameters.Count; i++)
        {
            var index = i;
            var paramInfo = SelectedRequestViewModel.RequestInfo.Parameters[index];
            var paramValue = SelectedRequestViewModel.ParameterValues[index];
            var isPrimitive = paramInfo.Type.IsPrimitive || paramInfo.Type.IsArray || paramInfo.Type == typeof(string);
            <tr>
                <td>
                    <paramType class="paramType-isPrimitive-@isPrimitive">@paramInfo.TypeDisplayName</paramType>
                    <paramLabel>@paramInfo.ParameterDisplayName </paramLabel>
                </td>
            </tr>
            <tr class="paramRow">
                <td>
                    <paramInput class="inputBorder">
                        <input class="paramTextBox" @bind-value="@SelectedRequestViewModel.ParameterValues[index]" />
                    </paramInput>
                </td>
            </tr>
        }
    </table>
    <div class="paddingContainer">
        <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="()=>Requested.InvokeAsync(SelectedRequestViewModel)">
            SEND
        </MudButton>
    </div>

</reqeustSideBarView>

@code {
    [Parameter] public RequestItemViewModel SelectedRequestViewModel { get; set; }
	[Parameter] public EventCallback<RequestItemViewModel> Requested { get; set; }

}
