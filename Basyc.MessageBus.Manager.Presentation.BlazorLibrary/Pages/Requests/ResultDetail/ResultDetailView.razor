@using Basyc.MessageBus.Manager.Application
@using Basyc.MessageBus.Manager.Presentation.BlazorLibrary.Pages.Requests.RequestTag

@{
    string requestDetailViewClass = "";
    if (RequestResult is not null)
    {
        requestDetailViewClass = $"requestDetailViewClass--state--{RequestResult.State.ToString()}";
    }
}

<requestDetailView class="@requestDetailViewClass">
    @if (RequestResult is null)
    {
        <ghostLabel>
            Select result to see details.
        </ghostLabel>
    }
    else
    {
        <requestDetailNotEmpty>
            <heading>
                <requestName>
                    @RequestResult.Request.RequestInfo.RequestDisplayName
                </requestName>
                <RequestTagView RequestType="@RequestTagTypeHelper.FromRequestType(RequestResult.Request.RequestInfo.RequestType)" TagStyle="TagStyle.Icon" />
                <id>
                    #@RequestResult.Id
                </id>
                <status>
                    <LatencyView RequestResult="RequestResult" />
                </status>
            </heading>

            <br />

            <label>
                Input
            </label>
            <inputs>
                @foreach (var parameter in RequestResult.Request.Parameters)
                {
                    <parameterRow>
                        <parameterName>
                            @parameter.ParameterInfo.ParameterDisplayName:
                        </parameterName>
                        <parameterValue>
                            @(parameter.Value == null ? "null" : parameter.Value)
                        </parameterValue>
                    </parameterRow>
                }
            </inputs>

            <br />

            <label>
                Output
            </label>
            <outputs>
                @if (RequestResult.State == RequestResultState.Started)
                {
                    <MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="100%" />
                }
                @if (RequestResult.State == RequestResultState.Completed)
                {
                    @if (RequestResult.Request.RequestInfo.HasResponse)
                    {
                        @RequestResult.Response
                    }
                    else
                    {
                        <MudContainer Hori>

                        </MudContainer>
                        <outputGhostLabel>
                            Result does not have an output
                        </outputGhostLabel>
                    }
                }
                @if (RequestResult.State == RequestResultState.Failed)
                {
                    @RequestResult.ErrorMessage
                }
            </outputs>
        </requestDetailNotEmpty>

    }

</requestDetailView>

@code {
    //[Parameter] public RequestResult RequestResult { get; set; }

    private RequestResult requestResult;

    [Parameter]
    public RequestResult RequestResult
    {
        get => requestResult;
        set
        {
            if (requestResult is not null)
            {
                requestResult.StateChanged -= ResultStateChanged;
            }
            requestResult = value;
            requestResult.StateChanged += ResultStateChanged;
        }
    }

    private void ResultStateChanged(object sender, EventArgs eventArgs)
    {
        this.StateHasChanged();
    }
}
